{"version":3,"sources":["alchemy.js"],"names":["window","document","AO","on","tinymce","initialSettings","tinyMCEPreInit","mceInit","$","$alchemy","pageID","$alchOptions","searchParams","popperInstances","URL","location","href","get","$fields","constrFields","$field","field","children","$children","i","child","type","find","each","push","$button","Function","alchemy","this","map","destroy","data","attr","removeClass","text","concat","id","instance","next","ajax","saveOptionsData","AlchemyData","dataType","all","fieldsPromises","then","values","success","append","nonce","reload","JSON","stringify","error","responseJSON","messsages","topMostPosition","url","contentType","$tooltip","blockTop","offset","code","Popper","modifiers","fallbackPlacements","top","parents","addClass","createPopper","placement","name","options","one","hasClass","removeAttr","animate","scrollTop","subscribe","wp","select","$metaboxes","$postForm","save_metadata","e","preventDefault","editor","isSavingPost","isAutosavingPost","saveMetaboxesData","Promise","postID","method","processData","submit","jQuery"],"mappings":"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","file":"alchemy.min.js","sourcesContent":["'use strict';\n\n((window, document, $) => {\n    window.AO = window.AO || {};\n\n    $(document).on('tinymce-editor-init', () => {\n        AO.tinymce = AO.tinymce || {};\n        AO.tinymce.initialSettings = tinyMCEPreInit.mceInit['alchemy-temp-editor'];\n    });\n\n    $(() => {\n        const $alchemy = $('.jsAlchemy');\n        const $metaboxes = $('.jsAlchemyMetaBox');\n\n        if( ! $alchemy ) {\n            return;\n        }\n\n        const $alchOptions = $('.jsAlchemyOptions');\n        const currentUrl = new URL(window.location.href);\n        const pageID = currentUrl.searchParams.get('page');\n        const data = new FormData();\n        const popperInstances = {};\n\n        const $fields = $alchOptions.children('.jsAlchemyField');\n        const constrFields = [];\n\n        $fields.each((i, field) => {\n            const $field = $(field);\n\n            if( 'sections' === $field.data('alchemy').type ) {\n                const $children = $field.find('.jsAlchemySectionsTab').children('.jsAlchemyField');\n\n                if( $children[0] ) {\n                    $children.each((i, child) => {\n                        constrFields.push($(child));\n                    });\n                }\n            } else {\n                constrFields.push($field);\n            }\n        });\n\n        $alchemy.on('click', '.jsAlchemySaveOptions', function() {\n            const $button = $(this);\n            const fieldsPromises = $(constrFields).map((i, $field) => {\n                const alchemy = $field.data('alchemy');\n\n                $field.removeClass('alchemy__field--invalid').children('.jsAlchemyValidationTooltip').find('.jsAlchemyTooltipText').text('');\n\n                return new Function( `return AO['get_${alchemy.type}_value']('${alchemy.id}');` )(alchemy.id)\n            }).get();\n\n            $.each(popperInstances, (i, instance) => {\n                instance.destroy();\n            });\n\n            $button.attr('disabled', true).next('.jsAlchemyLoader').removeClass('alchemy__spinner--hidden');\n\n            let saveOptionsData = AlchemyData['save-options'];\n\n            if( $button.data() && 'network' === $button.data('type') ) {\n                saveOptionsData = AlchemyData['save-network-options'];\n            }\n\n            Promise.all(fieldsPromises).then(values => {\n                data.append('_wpnonce', saveOptionsData.nonce);\n                data.append('page-id', pageID);\n                data.append('values', JSON.stringify(values));\n\n                $.ajax({\n                    method: \"POST\",\n                    url: saveOptionsData.url,\n                    dataType: 'json',\n                    processData: false,\n                    contentType: false,\n                    data: data,\n                    success: () => {\n                        window.location.reload();\n                    },\n                    error: error => {\n                        if( error.responseJSON.data && 'alch-save-validation-errors' === error.responseJSON.code ) {\n                            const messsages = error.responseJSON.data['invalid-fields'];\n\n                            let topMostPosition = 0;\n\n                            $(constrFields).each((i, $field) => {\n                                const alchemy = $field.data('alchemy');\n\n                                if( messsages[alchemy.id] ) {\n                                    const $tooltip = $field.children('.jsAlchemyValidationTooltip');\n                                    const blockTop = $field.offset().top;\n\n                                    topMostPosition = -100 + ( blockTop > topMostPosition ? blockTop : topMostPosition );\n\n                                    if( $tooltip[0] ) {\n                                        $tooltip.attr('data-show', true).find('.jsAlchemyTooltipText').text(messsages[alchemy.id]);\n\n                                        $field.addClass('alchemy__field--invalid').parents('.repeatee').addClass('repeatee--expanded');\n\n                                        popperInstances[alchemy.id] = Popper.createPopper( $field[0], $tooltip[0], {\n                                            placement: 'top',\n                                            modifiers: [\n                                                {\n                                                    name: 'flip',\n                                                    options: {\n                                                        fallbackPlacements: ['top-start'],\n                                                    },\n                                                }\n                                            ],\n                                        } );\n\n                                        $field.one('hover focus', () => {\n                                            if( $field.hasClass('alchemy__field--invalid') ) {\n                                                $field.removeClass('alchemy__field--invalid');\n\n                                                if( popperInstances[alchemy.id] ) {\n                                                    popperInstances[alchemy.id].destroy();\n\n                                                    $tooltip.removeAttr('data-show');\n                                                }\n                                            }\n                                        });\n\n                                        if( topMostPosition ) {\n                                            $('html').add('body').animate({ scrollTop: topMostPosition }, 500);\n                                        }\n                                    }\n                                }\n                            });\n                        }\n\n                        $button.next('.jsAlchemyLoader').addClass('alchemy__spinner--hidden');\n                    },\n                    complete: () => {\n                        $button.removeAttr('disabled');\n                    }\n                });\n            });\n        });\n\n        if( $metaboxes[0] ) {\n            const $postForm = $('#post');\n\n            $metaboxes.closest('.postbox').find('.hndle').removeClass('hndle'); // this removes dnd for metaboxes\n\n            if( $postForm[0] ) {\n                $('#publish').on('click', function(e) {\n                    $(this).attr('disabled', true);\n\n                    save_metadata($postForm);\n\n                    e.preventDefault();\n                });\n            } else if( wp.data && wp.data.subscribe ) {\n                wp.data.subscribe(() => {\n                    const editor = wp.data.select('core/editor');\n\n                    if ( editor.isSavingPost() && ! editor.isAutosavingPost() ) {\n                        save_metadata();\n                    }\n                });\n            }\n        }\n\n        function save_metadata($postForm) {\n            const $fields = $metaboxes.children('.metabox__fields').children('.jsAlchemyField');\n            const constrFields = [];\n\n            $fields.each((i, field) => {\n                const $field = $(field);\n\n                if( 'sections' === $field.data('alchemy').type ) {\n                    const $children = $field.find('.jsAlchemySectionsTab').children('.jsAlchemyField');\n\n                    if( $children[0] ) {\n                        $children.each((i, child) => {\n                            constrFields.push($(child));\n                        });\n                    }\n                } else {\n                    constrFields.push($field);\n                }\n            });\n\n            const fieldsPromises = $(constrFields).map((i, field) => {\n                const alchemy = $(field).data('alchemy');\n\n                return new Function( `return AO['get_${alchemy.type}_value']('${alchemy.id}');` )(alchemy.id)\n            }).get();\n\n            const saveMetaboxesData = AlchemyData['save-metaboxes'];\n\n            Promise.all(fieldsPromises).then(values => {\n                data.append('_wpnonce', saveMetaboxesData.nonce);\n                data.append('post-id', saveMetaboxesData.postID);\n                data.append('values', JSON.stringify(values));\n\n                $.ajax({\n                    method: \"POST\",\n                    url: saveMetaboxesData.url,\n                    dataType: 'json',\n                    processData: false,\n                    contentType: false,\n                    data: data,\n                    success: () => {\n                        if( $postForm && $postForm[0] ) {\n                            $postForm.submit();\n                        }\n                    }\n                });\n            });\n        }\n    });\n})(window, document, jQuery);\n"]}