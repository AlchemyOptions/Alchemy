{"version":3,"sources":["fields/post-type-select/scripts.js"],"names":["window","document","$","AO","$document","ptsData","postTypeSelect","currentUrl","URL","fieldData","searchParams","select2","AlchemyPTSData","pageID","locale","location","href","get","type","dataType","delay","url","params","data","searchedFor","term","_wpnonce","nonce","post-type","page-id","processResults","results","$target","minimumInputLength","append","change","e","target","siblings","children","concat","on","id","option","detach","$select","Promise","resolve","val","ready","$ptsSelects","initialise_post_type_select","each","i","select","repeatee","get_post_type_select_value","jQuery","value"],"mappings":"AAAA,cAEA,SAACA,EAAAC,EAAAC,GACGF,EAAAG,GAAYH,EAAAG,IAAZ,GAIAC,IAAAA,EAAgBF,EAAAD,GAwBZ,SAAMI,EAAwBC,GACxBC,IAAAA,EAAaL,EAAIM,GACXC,EAAGF,EAAWG,KAAAA,WAElBC,EAAQC,eAAA,OAENC,EADcC,IAAAA,IADRd,EAAAe,SAAAC,MAENN,aAAAO,IAAA,QAEFC,EAAMP,QAFJ,CAGFQ,SAAUV,EAHRK,OAIFM,KAJE,CAKIC,IAAAhB,EAAAiB,IACFJ,KAAO,MACHC,SAAA,OACAC,MAAA,IACAG,KAAA,SAAAD,GACA,MAAWT,CAJfW,YAAAF,EAAAG,KANFC,SAAArB,EAAAsB,MAacC,YAAAnB,EAAA,aACLoB,UAAAhB,IAdTiB,eAAA,SAAAP,GAkBK,MAAA,CApBCQ,QAAAR,EAAAA,OAwBNS,OAAa,GAGbC,mBAAN,IACAD,GAAQE,iBAAeC,SAAAA,GA5B3B,IAAAH,EAAA9B,EAAAkC,EAAAC,QA+BQC,EAASN,EAAAO,SAAA,UAAAC,OAAiCC,EAAlDnB,OAAqDC,KAASmB,GAA7C,MAAjBC,EAAAC,SAGHZ,EAAAE,OAAAS,GAAAR,WAGGU,EAAOC,SAAQC,iCAASN,GAAA,QAAA,WACpBI,EAAQG,IAAA,IAAAb,WAlEhB/B,EAAU6C,MAAM,WAGRC,IAAAA,EAAiBhD,EAAA,4BAEbiD,EAAAA,IADJD,EAAAE,KAAA,SAAAC,EAAAC,GAGHH,EAAAG,OAGLlD,EAAUqC,GAAG,sBAAuB,SAASL,EAAGb,GAIxC2B,IACAA,EADiB3B,EAAAgC,SACID,KAAJ,4BAAjBJ,EAAA,IAGHA,EAAAE,KAAA,SAAAC,EAAAC,GARLH,EAAAG,OAsDAnD,GAAAqD,2BAAA,SAAAd,GAOD1C,OAAQC,QAAUwD,QA5ErB,CAuEYvC,KAAQ,mBACRwB,GAAMA,EACNgB,MAASxD,EAAC,IAAAsC,OAAKE,IAAMM,SAzEjC,CA4EGhD,OAAQC,SAAUwD","file":"fields\\post-type-select\\scripts.min.js","sourcesContent":["\"use strict\";\r\n\r\n(function(window, document, $) {\r\n    window.AO = window.AO || {};\r\n\r\n    const $document = $(document);\r\n\r\n    $document.ready(() => {\r\n        const $ptsSelects = $('.jsAlchemyPostTypeSelect');\r\n\r\n        if( $ptsSelects[0] ) {\r\n            $ptsSelects.each((i, select) => {\r\n                initialise_post_type_select(select);\r\n            });\r\n        }\r\n    });\r\n\r\n    $document.on('alch_repeatee_added', function(e, data) {\r\n        const $repeatee = data.repeatee;\r\n        const $ptsSelects = $repeatee.find('.jsAlchemyPostTypeSelect');\r\n\r\n        if( $ptsSelects[0] ) {\r\n            $ptsSelects.each((i, select) => {\r\n                initialise_post_type_select(select);\r\n            });\r\n        }\r\n    });\r\n\r\n    function initialise_post_type_select(postTypeSelect) {\r\n        const $select = $(postTypeSelect);\r\n        const fieldData = $select.data('alchemy');\r\n        const ptsData = AlchemyPTSData['search'];\r\n        const currentUrl = new URL(window.location.href);\r\n        const pageID = currentUrl.searchParams.get('page');\r\n\r\n        $select.select2({\r\n            language: fieldData.locale,\r\n            ajax: {\r\n                url: ptsData.url,\r\n                type: 'get',\r\n                dataType: 'json',\r\n                delay: 250,\r\n                data: params => {\r\n                    return {\r\n                        'searchedFor': params.term,\r\n                        '_wpnonce': ptsData.nonce,\r\n                        'post-type': fieldData['post-type'],\r\n                        'page-id': pageID\r\n                    };\r\n                },\r\n                processResults: data => {\r\n                    return {\r\n                        results: data.data,\r\n                    };\r\n                },\r\n                cache: false\r\n            },\r\n            minimumInputLength: 2\r\n        }).on('select2:select', e => {\r\n            const $target = $(e.target);\r\n            const option = $target.children(`[value=${e.params.data.id}]`);\r\n\r\n            option.detach();\r\n            $target.append(option).change();\r\n        });\r\n\r\n        $select.siblings('.jsAlchemyPostTypeSelectClear').on('click', () => {\r\n            $select.val(\"\").change();\r\n        });\r\n    }\r\n\r\n    AO.get_post_type_select_value = id => {\r\n        return Promise.resolve( {\r\n            'type': 'post_type_select',\r\n            'id': id,\r\n            'value': $(`#${id}`).val()\r\n        } );\r\n    };\r\n})(window, document, jQuery);"]}